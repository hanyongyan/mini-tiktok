// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q         = new(Query)
	TComment  *tComment
	TFavorite *tFavorite
	TFollow   *tFollow
	TUser     *tUser
	TVideo    *tVideo
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	TComment = &Q.TComment
	TFavorite = &Q.TFavorite
	TFollow = &Q.TFollow
	TUser = &Q.TUser
	TVideo = &Q.TVideo
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:        db,
		TComment:  newTComment(db, opts...),
		TFavorite: newTFavorite(db, opts...),
		TFollow:   newTFollow(db, opts...),
		TUser:     newTUser(db, opts...),
		TVideo:    newTVideo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	TComment  tComment
	TFavorite tFavorite
	TFollow   tFollow
	TUser     tUser
	TVideo    tVideo
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		TComment:  q.TComment.clone(db),
		TFavorite: q.TFavorite.clone(db),
		TFollow:   q.TFollow.clone(db),
		TUser:     q.TUser.clone(db),
		TVideo:    q.TVideo.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		TComment:  q.TComment.replaceDB(db),
		TFavorite: q.TFavorite.replaceDB(db),
		TFollow:   q.TFollow.replaceDB(db),
		TUser:     q.TUser.replaceDB(db),
		TVideo:    q.TVideo.replaceDB(db),
	}
}

type queryCtx struct {
	TComment  ITCommentDo
	TFavorite ITFavoriteDo
	TFollow   ITFollowDo
	TUser     ITUserDo
	TVideo    ITVideoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TComment:  q.TComment.WithContext(ctx),
		TFavorite: q.TFavorite.WithContext(ctx),
		TFollow:   q.TFollow.WithContext(ctx),
		TUser:     q.TUser.WithContext(ctx),
		TVideo:    q.TVideo.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
