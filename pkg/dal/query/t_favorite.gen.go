// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"mini_tiktok/pkg/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

)

func newTFavorite(db *gorm.DB, opts ...gen.DOOption) tFavorite {
	_tFavorite := tFavorite{}

	_tFavorite.tFavoriteDo.UseDB(db, opts...)
	_tFavorite.tFavoriteDo.UseModel(&model.TFavorite{})

	tableName := _tFavorite.tFavoriteDo.TableName()
	_tFavorite.ALL = field.NewAsterisk(tableName)
	_tFavorite.ID = field.NewInt64(tableName, "id")
	_tFavorite.VideoID = field.NewInt64(tableName, "video_id")
	_tFavorite.UserID = field.NewInt64(tableName, "user_id")
	_tFavorite.Status = field.NewBool(tableName, "status")

	_tFavorite.fillFieldMap()

	return _tFavorite
}

type tFavorite struct {
	tFavoriteDo tFavoriteDo

	ALL     field.Asterisk
	ID      field.Int64 // 点赞id
	VideoID field.Int64 // 视频id
	UserID  field.Int64 // 用户id
	Status  field.Bool  // 点赞状态(0为未点赞, 1为已点赞)

	fieldMap map[string]field.Expr
}

func (t tFavorite) Table(newTableName string) *tFavorite {
	t.tFavoriteDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tFavorite) As(alias string) *tFavorite {
	t.tFavoriteDo.DO = *(t.tFavoriteDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tFavorite) updateTableName(table string) *tFavorite {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.VideoID = field.NewInt64(table, "video_id")
	t.UserID = field.NewInt64(table, "user_id")
	t.Status = field.NewBool(table, "status")

	t.fillFieldMap()

	return t
}

func (t *tFavorite) WithContext(ctx context.Context) ITFavoriteDo {
	return t.tFavoriteDo.WithContext(ctx)
}

func (t tFavorite) TableName() string { return t.tFavoriteDo.TableName() }

func (t tFavorite) Alias() string { return t.tFavoriteDo.Alias() }

func (t *tFavorite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tFavorite) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["id"] = t.ID
	t.fieldMap["video_id"] = t.VideoID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["status"] = t.Status
}

func (t tFavorite) clone(db *gorm.DB) tFavorite {
	t.tFavoriteDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tFavorite) replaceDB(db *gorm.DB) tFavorite {
	t.tFavoriteDo.ReplaceDB(db)
	return t
}

type tFavoriteDo struct{ gen.DO }

type ITFavoriteDo interface {
	gen.SubQuery
	Debug() ITFavoriteDo
	WithContext(ctx context.Context) ITFavoriteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITFavoriteDo
	WriteDB() ITFavoriteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITFavoriteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITFavoriteDo
	Not(conds ...gen.Condition) ITFavoriteDo
	Or(conds ...gen.Condition) ITFavoriteDo
	Select(conds ...field.Expr) ITFavoriteDo
	Where(conds ...gen.Condition) ITFavoriteDo
	Order(conds ...field.Expr) ITFavoriteDo
	Distinct(cols ...field.Expr) ITFavoriteDo
	Omit(cols ...field.Expr) ITFavoriteDo
	Join(table schema.Tabler, on ...field.Expr) ITFavoriteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITFavoriteDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITFavoriteDo
	Group(cols ...field.Expr) ITFavoriteDo
	Having(conds ...gen.Condition) ITFavoriteDo
	Limit(limit int) ITFavoriteDo
	Offset(offset int) ITFavoriteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITFavoriteDo
	Unscoped() ITFavoriteDo
	Create(values ...*model.TFavorite) error
	CreateInBatches(values []*model.TFavorite, batchSize int) error
	Save(values ...*model.TFavorite) error
	First() (*model.TFavorite, error)
	Take() (*model.TFavorite, error)
	Last() (*model.TFavorite, error)
	Find() ([]*model.TFavorite, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TFavorite, err error)
	FindInBatches(result *[]*model.TFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TFavorite) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITFavoriteDo
	Assign(attrs ...field.AssignExpr) ITFavoriteDo
	Joins(fields ...field.RelationField) ITFavoriteDo
	Preload(fields ...field.RelationField) ITFavoriteDo
	FirstOrInit() (*model.TFavorite, error)
	FirstOrCreate() (*model.TFavorite, error)
	FindByPage(offset int, limit int) (result []*model.TFavorite, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITFavoriteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tFavoriteDo) Debug() ITFavoriteDo {
	return t.withDO(t.DO.Debug())
}

func (t tFavoriteDo) WithContext(ctx context.Context) ITFavoriteDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tFavoriteDo) ReadDB() ITFavoriteDo {
	return t.Clauses(dbresolver.Read)
}

func (t tFavoriteDo) WriteDB() ITFavoriteDo {
	return t.Clauses(dbresolver.Write)
}

func (t tFavoriteDo) Session(config *gorm.Session) ITFavoriteDo {
	return t.withDO(t.DO.Session(config))
}

func (t tFavoriteDo) Clauses(conds ...clause.Expression) ITFavoriteDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tFavoriteDo) Returning(value interface{}, columns ...string) ITFavoriteDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tFavoriteDo) Not(conds ...gen.Condition) ITFavoriteDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tFavoriteDo) Or(conds ...gen.Condition) ITFavoriteDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tFavoriteDo) Select(conds ...field.Expr) ITFavoriteDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tFavoriteDo) Where(conds ...gen.Condition) ITFavoriteDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tFavoriteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITFavoriteDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tFavoriteDo) Order(conds ...field.Expr) ITFavoriteDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tFavoriteDo) Distinct(cols ...field.Expr) ITFavoriteDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tFavoriteDo) Omit(cols ...field.Expr) ITFavoriteDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tFavoriteDo) Join(table schema.Tabler, on ...field.Expr) ITFavoriteDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tFavoriteDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITFavoriteDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tFavoriteDo) RightJoin(table schema.Tabler, on ...field.Expr) ITFavoriteDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tFavoriteDo) Group(cols ...field.Expr) ITFavoriteDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tFavoriteDo) Having(conds ...gen.Condition) ITFavoriteDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tFavoriteDo) Limit(limit int) ITFavoriteDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tFavoriteDo) Offset(offset int) ITFavoriteDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tFavoriteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITFavoriteDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tFavoriteDo) Unscoped() ITFavoriteDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tFavoriteDo) Create(values ...*model.TFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tFavoriteDo) CreateInBatches(values []*model.TFavorite, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tFavoriteDo) Save(values ...*model.TFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tFavoriteDo) First() (*model.TFavorite, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFavorite), nil
	}
}

func (t tFavoriteDo) Take() (*model.TFavorite, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFavorite), nil
	}
}

func (t tFavoriteDo) Last() (*model.TFavorite, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFavorite), nil
	}
}

func (t tFavoriteDo) Find() ([]*model.TFavorite, error) {
	result, err := t.DO.Find()
	return result.([]*model.TFavorite), err
}

func (t tFavoriteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TFavorite, err error) {
	buf := make([]*model.TFavorite, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tFavoriteDo) FindInBatches(result *[]*model.TFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tFavoriteDo) Attrs(attrs ...field.AssignExpr) ITFavoriteDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tFavoriteDo) Assign(attrs ...field.AssignExpr) ITFavoriteDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tFavoriteDo) Joins(fields ...field.RelationField) ITFavoriteDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tFavoriteDo) Preload(fields ...field.RelationField) ITFavoriteDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tFavoriteDo) FirstOrInit() (*model.TFavorite, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFavorite), nil
	}
}

func (t tFavoriteDo) FirstOrCreate() (*model.TFavorite, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFavorite), nil
	}
}

func (t tFavoriteDo) FindByPage(offset int, limit int) (result []*model.TFavorite, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tFavoriteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tFavoriteDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tFavoriteDo) Delete(models ...*model.TFavorite) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tFavoriteDo) withDO(do gen.Dao) *tFavoriteDo {
	t.DO = *do.(*gen.DO)
	return t
}
