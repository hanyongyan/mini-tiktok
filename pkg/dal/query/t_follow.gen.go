// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"mini_tiktok/pkg/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

)

func newTFollow(db *gorm.DB, opts ...gen.DOOption) tFollow {
	_tFollow := tFollow{}

	_tFollow.tFollowDo.UseDB(db, opts...)
	_tFollow.tFollowDo.UseModel(&model.TFollow{})

	tableName := _tFollow.tFollowDo.TableName()
	_tFollow.ALL = field.NewAsterisk(tableName)
	_tFollow.ID = field.NewInt64(tableName, "id")
	_tFollow.UserID = field.NewInt64(tableName, "user_id")
	_tFollow.FollowerID = field.NewInt64(tableName, "follower_id")

	_tFollow.fillFieldMap()

	return _tFollow
}

type tFollow struct {
	tFollowDo tFollowDo

	ALL        field.Asterisk
	ID         field.Int64 // 主键id
	UserID     field.Int64 // 用户id
	FollowerID field.Int64 // 关注者id

	fieldMap map[string]field.Expr
}

func (t tFollow) Table(newTableName string) *tFollow {
	t.tFollowDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tFollow) As(alias string) *tFollow {
	t.tFollowDo.DO = *(t.tFollowDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tFollow) updateTableName(table string) *tFollow {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.UserID = field.NewInt64(table, "user_id")
	t.FollowerID = field.NewInt64(table, "follower_id")

	t.fillFieldMap()

	return t
}

func (t *tFollow) WithContext(ctx context.Context) ITFollowDo { return t.tFollowDo.WithContext(ctx) }

func (t tFollow) TableName() string { return t.tFollowDo.TableName() }

func (t tFollow) Alias() string { return t.tFollowDo.Alias() }

func (t *tFollow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tFollow) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["follower_id"] = t.FollowerID
}

func (t tFollow) clone(db *gorm.DB) tFollow {
	t.tFollowDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tFollow) replaceDB(db *gorm.DB) tFollow {
	t.tFollowDo.ReplaceDB(db)
	return t
}

type tFollowDo struct{ gen.DO }

type ITFollowDo interface {
	gen.SubQuery
	Debug() ITFollowDo
	WithContext(ctx context.Context) ITFollowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITFollowDo
	WriteDB() ITFollowDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITFollowDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITFollowDo
	Not(conds ...gen.Condition) ITFollowDo
	Or(conds ...gen.Condition) ITFollowDo
	Select(conds ...field.Expr) ITFollowDo
	Where(conds ...gen.Condition) ITFollowDo
	Order(conds ...field.Expr) ITFollowDo
	Distinct(cols ...field.Expr) ITFollowDo
	Omit(cols ...field.Expr) ITFollowDo
	Join(table schema.Tabler, on ...field.Expr) ITFollowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITFollowDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITFollowDo
	Group(cols ...field.Expr) ITFollowDo
	Having(conds ...gen.Condition) ITFollowDo
	Limit(limit int) ITFollowDo
	Offset(offset int) ITFollowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITFollowDo
	Unscoped() ITFollowDo
	Create(values ...*model.TFollow) error
	CreateInBatches(values []*model.TFollow, batchSize int) error
	Save(values ...*model.TFollow) error
	First() (*model.TFollow, error)
	Take() (*model.TFollow, error)
	Last() (*model.TFollow, error)
	Find() ([]*model.TFollow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TFollow, err error)
	FindInBatches(result *[]*model.TFollow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TFollow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITFollowDo
	Assign(attrs ...field.AssignExpr) ITFollowDo
	Joins(fields ...field.RelationField) ITFollowDo
	Preload(fields ...field.RelationField) ITFollowDo
	FirstOrInit() (*model.TFollow, error)
	FirstOrCreate() (*model.TFollow, error)
	FindByPage(offset int, limit int) (result []*model.TFollow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITFollowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tFollowDo) Debug() ITFollowDo {
	return t.withDO(t.DO.Debug())
}

func (t tFollowDo) WithContext(ctx context.Context) ITFollowDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tFollowDo) ReadDB() ITFollowDo {
	return t.Clauses(dbresolver.Read)
}

func (t tFollowDo) WriteDB() ITFollowDo {
	return t.Clauses(dbresolver.Write)
}

func (t tFollowDo) Session(config *gorm.Session) ITFollowDo {
	return t.withDO(t.DO.Session(config))
}

func (t tFollowDo) Clauses(conds ...clause.Expression) ITFollowDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tFollowDo) Returning(value interface{}, columns ...string) ITFollowDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tFollowDo) Not(conds ...gen.Condition) ITFollowDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tFollowDo) Or(conds ...gen.Condition) ITFollowDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tFollowDo) Select(conds ...field.Expr) ITFollowDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tFollowDo) Where(conds ...gen.Condition) ITFollowDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tFollowDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITFollowDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tFollowDo) Order(conds ...field.Expr) ITFollowDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tFollowDo) Distinct(cols ...field.Expr) ITFollowDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tFollowDo) Omit(cols ...field.Expr) ITFollowDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tFollowDo) Join(table schema.Tabler, on ...field.Expr) ITFollowDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tFollowDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITFollowDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tFollowDo) RightJoin(table schema.Tabler, on ...field.Expr) ITFollowDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tFollowDo) Group(cols ...field.Expr) ITFollowDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tFollowDo) Having(conds ...gen.Condition) ITFollowDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tFollowDo) Limit(limit int) ITFollowDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tFollowDo) Offset(offset int) ITFollowDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tFollowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITFollowDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tFollowDo) Unscoped() ITFollowDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tFollowDo) Create(values ...*model.TFollow) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tFollowDo) CreateInBatches(values []*model.TFollow, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tFollowDo) Save(values ...*model.TFollow) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tFollowDo) First() (*model.TFollow, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFollow), nil
	}
}

func (t tFollowDo) Take() (*model.TFollow, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFollow), nil
	}
}

func (t tFollowDo) Last() (*model.TFollow, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFollow), nil
	}
}

func (t tFollowDo) Find() ([]*model.TFollow, error) {
	result, err := t.DO.Find()
	return result.([]*model.TFollow), err
}

func (t tFollowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TFollow, err error) {
	buf := make([]*model.TFollow, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tFollowDo) FindInBatches(result *[]*model.TFollow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tFollowDo) Attrs(attrs ...field.AssignExpr) ITFollowDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tFollowDo) Assign(attrs ...field.AssignExpr) ITFollowDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tFollowDo) Joins(fields ...field.RelationField) ITFollowDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tFollowDo) Preload(fields ...field.RelationField) ITFollowDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tFollowDo) FirstOrInit() (*model.TFollow, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFollow), nil
	}
}

func (t tFollowDo) FirstOrCreate() (*model.TFollow, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFollow), nil
	}
}

func (t tFollowDo) FindByPage(offset int, limit int) (result []*model.TFollow, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tFollowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tFollowDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tFollowDo) Delete(models ...*model.TFollow) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tFollowDo) withDO(do gen.Dao) *tFollowDo {
	t.DO = *do.(*gen.DO)
	return t
}
