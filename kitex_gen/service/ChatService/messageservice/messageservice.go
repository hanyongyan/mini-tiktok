// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	chatservice "mini_tiktok/kitex_gen/service/ChatService"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*chatservice.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"MessageAction": kitex.NewMethodInfo(messageActionHandler, newMessageServiceMessageActionArgs, newMessageServiceMessageActionResult, false),
		"MessageChat":   kitex.NewMethodInfo(messageChatHandler, newMessageServiceMessageChatArgs, newMessageServiceMessageChatResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "chatservice",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chatservice.MessageServiceMessageActionArgs)
	realResult := result.(*chatservice.MessageServiceMessageActionResult)
	success, err := handler.(chatservice.MessageService).MessageAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMessageActionArgs() interface{} {
	return chatservice.NewMessageServiceMessageActionArgs()
}

func newMessageServiceMessageActionResult() interface{} {
	return chatservice.NewMessageServiceMessageActionResult()
}

func messageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chatservice.MessageServiceMessageChatArgs)
	realResult := result.(*chatservice.MessageServiceMessageChatResult)
	success, err := handler.(chatservice.MessageService).MessageChat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMessageChatArgs() interface{} {
	return chatservice.NewMessageServiceMessageChatArgs()
}

func newMessageServiceMessageChatResult() interface{} {
	return chatservice.NewMessageServiceMessageChatResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MessageAction(ctx context.Context, req *chatservice.MessageActionReq) (r *chatservice.MessageActionResp, err error) {
	var _args chatservice.MessageServiceMessageActionArgs
	_args.Req = req
	var _result chatservice.MessageServiceMessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageChat(ctx context.Context, req *chatservice.MessageChatReq) (r *chatservice.MessageChatResp, err error) {
	var _args chatservice.MessageServiceMessageChatArgs
	_args.Req = req
	var _result chatservice.MessageServiceMessageChatResult
	if err = p.c.Call(ctx, "MessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
