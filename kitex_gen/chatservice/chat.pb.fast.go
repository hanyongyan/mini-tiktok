// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package chatservice

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Message) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Message[number], err)
}

func (x *Message) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MessageActionReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MessageActionReq[number], err)
}

func (x *MessageActionReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MessageActionReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ToUserKey, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MessageActionReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ActionType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MessageActionReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MessageActionResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *MessageChatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MessageChatReq[number], err)
}

func (x *MessageChatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ChatKey, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MessageChatReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MsgContent, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MessageChatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MessageChatResp[number], err)
}

func (x *MessageChatResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.MessageList = append(x.MessageList, &v)
	return offset, nil
}

func (x *Message) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Message) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Id)
	return offset
}

func (x *Message) fastWriteField2(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.Content)
	return offset
}

func (x *Message) fastWriteField3(buf []byte) (offset int) {
	if x.CreateTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.CreateTime)
	return offset
}

func (x *MessageActionReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *MessageActionReq) fastWriteField1(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.Token)
	return offset
}

func (x *MessageActionReq) fastWriteField2(buf []byte) (offset int) {
	if x.ToUserKey == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.ToUserKey)
	return offset
}

func (x *MessageActionReq) fastWriteField3(buf []byte) (offset int) {
	if x.ActionType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.ActionType)
	return offset
}

func (x *MessageActionReq) fastWriteField4(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.Content)
	return offset
}

func (x *MessageActionResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *MessageChatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *MessageChatReq) fastWriteField1(buf []byte) (offset int) {
	if x.ChatKey == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.ChatKey)
	return offset
}

func (x *MessageChatReq) fastWriteField2(buf []byte) (offset int) {
	if x.MsgContent == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.MsgContent)
	return offset
}

func (x *MessageChatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *MessageChatResp) fastWriteField1(buf []byte) (offset int) {
	if x.MessageList == nil {
		return offset
	}
	for i := range x.MessageList {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.MessageList[i])
	}
	return offset
}

func (x *Message) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Message) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Id)
	return n
}

func (x *Message) sizeField2() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(2, x.Content)
	return n
}

func (x *Message) sizeField3() (n int) {
	if x.CreateTime == "" {
		return n
	}
	n += fastpb.SizeString(3, x.CreateTime)
	return n
}

func (x *MessageActionReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *MessageActionReq) sizeField1() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(1, x.Token)
	return n
}

func (x *MessageActionReq) sizeField2() (n int) {
	if x.ToUserKey == "" {
		return n
	}
	n += fastpb.SizeString(2, x.ToUserKey)
	return n
}

func (x *MessageActionReq) sizeField3() (n int) {
	if x.ActionType == "" {
		return n
	}
	n += fastpb.SizeString(3, x.ActionType)
	return n
}

func (x *MessageActionReq) sizeField4() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(4, x.Content)
	return n
}

func (x *MessageActionResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *MessageChatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *MessageChatReq) sizeField1() (n int) {
	if x.ChatKey == "" {
		return n
	}
	n += fastpb.SizeString(1, x.ChatKey)
	return n
}

func (x *MessageChatReq) sizeField2() (n int) {
	if x.MsgContent == "" {
		return n
	}
	n += fastpb.SizeString(2, x.MsgContent)
	return n
}

func (x *MessageChatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *MessageChatResp) sizeField1() (n int) {
	if x.MessageList == nil {
		return n
	}
	for i := range x.MessageList {
		n += fastpb.SizeMessage(1, x.MessageList[i])
	}
	return n
}

var fieldIDToName_Message = map[int32]string{
	1: "Id",
	2: "Content",
	3: "CreateTime",
}

var fieldIDToName_MessageActionReq = map[int32]string{
	1: "Token",
	2: "ToUserKey",
	3: "ActionType",
	4: "Content",
}

var fieldIDToName_MessageActionResp = map[int32]string{}

var fieldIDToName_MessageChatReq = map[int32]string{
	1: "ChatKey",
	2: "MsgContent",
}

var fieldIDToName_MessageChatResp = map[int32]string{
	1: "MessageList",
}
